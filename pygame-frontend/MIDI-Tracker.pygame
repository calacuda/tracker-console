import pygame
from pygame.rect import Rect
from tracker_backend import InputCMD, Button, ScreenData, State, get_config, run as run_tracker
from pathlib import Path
from midi_tracker.phrase_tab import PhrasesTab
from midi_tracker._logging import get_logger
from midi_tracker.side_bar import SideBar
from midi_tracker.song_tab import SongTab
from midi_tracker.chains_tab import ChainsTab
from midi_tracker.insts_tab import InstsTab
from logging import DEBUG, INFO
from dataclasses import dataclass


THIS_DIR = Path(__file__)
THIS_DIR = THIS_DIR.parent.absolute()
SCREEN_WIDTH = 1280
SCREEN_HEIGHT = 720
SCREEN_SIZE = (SCREEN_WIDTH, SCREEN_HEIGHT)
HIGHLIGHT_BORDERS = 20  # 30
CONFIG = get_config()


pygame.init()
# pygame.joystick.init()
# controller_found = False
# joy = None
screen = pygame.display.set_mode(SCREEN_SIZE)
pygame.font.init()
fonts = [pygame.font.Font(f'{THIS_DIR}/Anonymous Pro.ttf', 45),
         pygame.font.Font(f'{THIS_DIR}/Anonymous Pro.ttf', 30),
         pygame.font.Font(f'{THIS_DIR}/Anonymous Pro.ttf', 20),
         pygame.font.Font(f'{THIS_DIR}/Anonymous Pro.ttf', 18)]
clock = pygame.time.Clock()
done = False
log = get_logger("MIDI-Tracker", DEBUG)


@dataclass
class PygameState:
    screen = screen
    fonts = fonts
    screen_size = SCREEN_SIZE
    config = CONFIG
    log = log

    def display_note(self, note) -> str:
        if note is not None:
            octave = note // 12
            name = note % 12

            names = ["C-", "C#", "D-", "D#", "E-",
                     "F-", "F#", "G", "G#", "A-", "A#", "B-"]

            note = names[name]
            return f"{note}{octave:X}"
        else:
            return "---"

    def draw_tap_map(self, i: int, left_most: float, top: float):
        tabs = ["Song", "Chain", "Phrase", "Insts", "Synth", "Setts"]

        # text = f"{prev} <= {this} => {next}"
        (prev, this, next) = (tabs[i - 1], tabs[i], tabs[i + 1])

        middle_y = (top + SCREEN_HEIGHT) * 0.5
        color = self.config.colors.text
        width = SCREEN_WIDTH - left_most - left_most * 0.025
        offset = ((SCREEN_WIDTH - left_most) / 5.0) / 2.0
        note_width = width / 5.0

        for i, text in enumerate((prev, "<=", this, "=>", next)):
            middle_x = (left_most + offset + (note_width * i))
            display = self.fonts[3].render(
                text, True, color)
            textRect = display.get_rect()

            textRect.center = (middle_x, middle_y)

            self.screen.blit(display, textRect)

    def draw_rect(self, ancor, size, fill_color, center=True):
        color = fill_color
        (left, top) = ancor
        (width, height) = size

        rect = Rect((top, left), (width, height))

        if center:
            rect.center = (left, top)

        pygame.draw.rect(screen, color, rect)


def clear_screen():
    log.debug("clearing screen")
    screen.fill((30, 30, 46))


clear_screen()

tracker_ipc = run_tracker()


def handle_pygame_events():
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            log.warning("QUITTING")
            tracker_ipc.send(InputCMD.Exit())
            pygame.quit()
            return False
        elif event.type == pygame.JOYDEVICEADDED:
            pass

    return True


def draw_song(state: State):
    log.debug("drawing Song tab")
    tab = SongTab(state, PygameState())
    tab.draw()


def draw_chain(state: State):
    log.debug("drawing Chain tab")
    tab = ChainsTab(state, PygameState())
    tab.draw()


def draw_phrase(state: State):
    log.debug("drawing phrase tab")
    tab = PhrasesTab(state, PygameState())
    tab.draw()


def draw_inst(state: State):
    log.debug("drawing Instrument tab")
    tab = InstsTab(state, PygameState())
    tab.draw()


def draw_side(state: State, i):
    log.debug("drawing side bar")
    side_bar = SideBar(state, PygameState())
    side_bar.draw(i)


def proccess_state_change():
    state = tracker_ipc.recv()

    if state:
        log.debug("got new state")
        clear_screen()
    else:
        return

    match state.screen:
        case ScreenData.Song(_):
            log.info("Song tab state recieved")
            # log.error("not yet implemented")
            draw_song(state)
            draw_side(state, 0)
        case ScreenData.Chain(_):
            log.info("Chain tab state recieved")
            # log.error("not yet implemented")
            draw_chain(state)
            draw_side(state, 1)
        case ScreenData.Phrase(_):
            log.info("Phrase tab state recieved")
            # log.error("not yet implemented")
            draw_phrase(state)
            draw_side(state, 2)
        case ScreenData.Instrument(_):
            log.info("Instrument tab state recieved")
            # log.error("not yet implemented")
            draw_inst(state)
            draw_side(state, 3)
        case ScreenData.PlaySynth():
            log.info("Synth tab state recieved")
            log.error("not yet implemented")
        case ScreenData.Settings():
            log.info("Settings tab state recieved")
            log.error("not yet implemented")
        case other:
            log.error(f"unknown state recieved: {other!r}")


def loop_clean_up():
    pygame.display.update()
    clock.tick()


while handle_pygame_events():
    # proccess_cmd()
    proccess_state_change()
    loop_clean_up()

print("DONE")
quit()
